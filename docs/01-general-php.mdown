# General PHP Notes

These are a few useful notes when using php. They may be right, wrong, or unclear, but here they are.

## Preference related notes

These notes are primarily related to a preference and not neccesarily related to performance (some may be, but I'm not sure)

+ When using php within html, don't bother with closing php tags. (i.e. use `<?php echo $one ?>` over `<?php echo $one; ?>`). It keeps the syntax cleaner.
+ `$_GET` is almost completely unnecessary 

## Performance related notes

+ When using `echo` with string concatenation, use the *alternative* syntax (may not be the right word)

		<?php echo 'one', $two, 'three' ?>
+ Use single quotes around strings unless your string contains a variable
+ Don't use getters / setters in your classes if the only purpose of the setter / getter is directly access the data
+ Avoid creating excess variables (if you can use as $_POST variable directly, there is no reason to copy it to another variable first)
+ 	**ALWAYS** use single quotes to access associative array items
 
 	This is correct `<?php $item['key'] = $value ?>`
 	
 	This is incorrect `<?php $item[key] = $value ?>`
+ `===` is just a bit faster than `==`
+ pre-increment your counter on a for loop
 
 		<?php for ($i = 0; $i < 1000; ++$i) echo $i; ?>
+ Don't use php error suppression (i.e. `<?php echo @$one ?>`)
		

## Preference related notes 1

These notes are primarily related to a preference and not neccesarily related to performance (some may be, but I'm not sure)

+ When using php within html, don't bother with closing php tags. (i.e. use `<?php echo $one ?>` over `<?php echo $one; ?>`). It keeps the syntax cleaner.
+ `$_GET` is almost completely unnecessary 

## Performance related notes 1

+ When using `echo` with string concatenation, use the *alternative* syntax (may not be the right word)

		<?php echo 'one', $two, 'three' ?>
+ Use single quotes around strings unless your string contains a variable
+ Don't use getters / setters in your classes if the only purpose of the setter / getter is directly access the data
+ Avoid creating excess variables (if you can use as $_POST variable directly, there is no reason to copy it to another variable first)
+ 	**ALWAYS** use single quotes to access associative array items
 
 	This is correct `<?php $item['key'] = $value ?>`
 	
 	This is incorrect `<?php $item[key] = $value ?>`
+ `===` is just a bit faster than `==`
+ pre-increment your counter on a for loop
 
 		<?php for ($i = 0; $i < 1000; ++$i) echo $i; ?>
+ Don't use php error suppression (i.e. `<?php echo @$one ?>`)

## Preference related notes 2

These notes are primarily related to a preference and not neccesarily related to performance (some may be, but I'm not sure)

+ When using php within html, don't bother with closing php tags. (i.e. use `<?php echo $one ?>` over `<?php echo $one; ?>`). It keeps the syntax cleaner.
+ `$_GET` is almost completely unnecessary 

## Performance related notes 2

+ When using `echo` with string concatenation, use the *alternative* syntax (may not be the right word)

		<?php echo 'one', $two, 'three' ?>
+ Use single quotes around strings unless your string contains a variable
+ Don't use getters / setters in your classes if the only purpose of the setter / getter is directly access the data
+ Avoid creating excess variables (if you can use as $_POST variable directly, there is no reason to copy it to another variable first)
+ 	**ALWAYS** use single quotes to access associative array items
 
 	This is correct `<?php $item['key'] = $value ?>`
 	
 	This is incorrect `<?php $item[key] = $value ?>`
+ `===` is just a bit faster than `==`
+ pre-increment your counter on a for loop
 
 		<?php for ($i = 0; $i < 1000; ++$i) echo $i; ?>
+ Don't use php error suppression (i.e. `<?php echo @$one ?>`)

## Preference related notes 3

These notes are primarily related to a preference and not neccesarily related to performance (some may be, but I'm not sure)

+ When using php within html, don't bother with closing php tags. (i.e. use `<?php echo $one ?>` over `<?php echo $one; ?>`). It keeps the syntax cleaner.
+ `$_GET` is almost completely unnecessary 

## Performance related notes 3

+ When using `echo` with string concatenation, use the *alternative* syntax (may not be the right word)

		<?php echo 'one', $two, 'three' ?>
+ Use single quotes around strings unless your string contains a variable
+ Don't use getters / setters in your classes if the only purpose of the setter / getter is directly access the data
+ Avoid creating excess variables (if you can use as $_POST variable directly, there is no reason to copy it to another variable first)
+ 	**ALWAYS** use single quotes to access associative array items
 
 	This is correct `<?php $item['key'] = $value ?>`
 	
 	This is incorrect `<?php $item[key] = $value ?>`
+ `===` is just a bit faster than `==`
+ pre-increment your counter on a for loop
 
 		<?php for ($i = 0; $i < 1000; ++$i) echo $i; ?>
+ Don't use php error suppression (i.e. `<?php echo @$one ?>`)

## Preference related notes 4

These notes are primarily related to a preference and not neccesarily related to performance (some may be, but I'm not sure)

+ When using php within html, don't bother with closing php tags. (i.e. use `<?php echo $one ?>` over `<?php echo $one; ?>`). It keeps the syntax cleaner.
+ `$_GET` is almost completely unnecessary 

## Performance related notes 4

+ When using `echo` with string concatenation, use the *alternative* syntax (may not be the right word)

		<?php echo 'one', $two, 'three' ?>
+ Use single quotes around strings unless your string contains a variable
+ Don't use getters / setters in your classes if the only purpose of the setter / getter is directly access the data
+ Avoid creating excess variables (if you can use as $_POST variable directly, there is no reason to copy it to another variable first)
+ 	**ALWAYS** use single quotes to access associative array items
 
 	This is correct `<?php $item['key'] = $value ?>`
 	
 	This is incorrect `<?php $item[key] = $value ?>`
+ `===` is just a bit faster than `==`
+ pre-increment your counter on a for loop
 
 		<?php for ($i = 0; $i < 1000; ++$i) echo $i; ?>
+ Don't use php error suppression (i.e. `<?php echo @$one ?>`)

## Preference related notes5 

These notes are primarily related to a preference and not neccesarily related to performance (some may be, but I'm not sure)

+ When using php within html, don't bother with closing php tags. (i.e. use `<?php echo $one ?>` over `<?php echo $one; ?>`). It keeps the syntax cleaner.
+ `$_GET` is almost completely unnecessary 

## Performance related notes 5

+ When using `echo` with string concatenation, use the *alternative* syntax (may not be the right word)

		<?php echo 'one', $two, 'three' ?>
+ Use single quotes around strings unless your string contains a variable
+ Don't use getters / setters in your classes if the only purpose of the setter / getter is directly access the data
+ Avoid creating excess variables (if you can use as $_POST variable directly, there is no reason to copy it to another variable first)
+ 	**ALWAYS** use single quotes to access associative array items
 
 	This is correct `<?php $item['key'] = $value ?>`
 	
 	This is incorrect `<?php $item[key] = $value ?>`
+ `===` is just a bit faster than `==`
+ pre-increment your counter on a for loop
 
 		<?php for ($i = 0; $i < 1000; ++$i) echo $i; ?>
+ Don't use php error suppression (i.e. `<?php echo @$one ?>`)

## Preference related notes 6

These notes are primarily related to a preference and not neccesarily related to performance (some may be, but I'm not sure)

+ When using php within html, don't bother with closing php tags. (i.e. use `<?php echo $one ?>` over `<?php echo $one; ?>`). It keeps the syntax cleaner.
+ `$_GET` is almost completely unnecessary 

## Performance related notes 6

+ When using `echo` with string concatenation, use the *alternative* syntax (may not be the right word)

		<?php echo 'one', $two, 'three' ?>
+ Use single quotes around strings unless your string contains a variable
+ Don't use getters / setters in your classes if the only purpose of the setter / getter is directly access the data
+ Avoid creating excess variables (if you can use as $_POST variable directly, there is no reason to copy it to another variable first)
+ 	**ALWAYS** use single quotes to access associative array items
 
 	This is correct `<?php $item['key'] = $value ?>`
 	
 	This is incorrect `<?php $item[key] = $value ?>`
+ `===` is just a bit faster than `==`
+ pre-increment your counter on a for loop
 
 		<?php for ($i = 0; $i < 1000; ++$i) echo $i; ?>
+ Don't use php error suppression (i.e. `<?php echo @$one ?>`)